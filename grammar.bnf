# Grammar for parser

<expr> ::= <expr> <attachment> 
		 | <call> 
         | <block>
         | string 
         | integer
         | float
         | boolean
         | lparen <expr> rparen
         | <def>

<call> ::= name lparen <args> rparen <block>
         | name <args> <block>
		 | name lparen <args> rparen
         | name <args>

<args> ::= <expr> comma <args>
         | <expr>
         | 0;

<attachment> ::= dot <call>

<block> ::= do pipe <param_list> pipe <expr_list> <block_end>
          | do <expr_list> <block_end>

<block_end> ::= end
              | else <expr_list> end // else happens if break occurs to search for a return value

<param_list> ::= name comma <params> 
               | name

<expr_list> ::= <expr> <expr_list> 
              | <expr> 
              | 0

<def> ::= def name <expr>
// add modifiers like public, global, pointless to definitions 
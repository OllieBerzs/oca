PARSER => expr
LEXER => number string name bracketl bracketr comma newline dot

---------------PARSER---------------------
expr : (call | string | number) >> newline
call : (expr >> dot)[01] >> name >> bracketl[01] >> (expr)[>=0 <comma>] >> (bracketr | newline)

---------------LEXER----------------------
number : ( 0-9 )[>0]
string : (' | ") >> * >> (' | ")
name : ((a-Z | _)[1] >> (a-Z | 0-9 | _)[>0] >> =[01]) | (+ | - | * | /)
dot : .
bracketl : (
bracketr : )
comma : ,
newline : \n
